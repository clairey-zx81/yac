{
  "$schema": "http://json-schema.org/draft-04/schema",
  "id": "topology",
  "properties": {
    "link": {
      "description": "\n                    A Network Link connects a by Local (Source) node and\n                    a Remote (Destination) Network Nodes via a set of the \n                    nodes' termination points. \n                    As it is possible to have several links between the same\n                    source and destination nodes, and as a link could potentially\n                    be re-homed between termination points, to ensure that we \n                    would always know to distinguish between links, every link \n                    is identified by a dedicated link identifier.  \n                    Note that a link models a point-to-point link, not a multipoint\n                    link.  \n                    Layering dependencies on links in underlay topologies are\n                    not represented as the layering information of nodes and of \n                    termination points is sufficient.  \n                ",
      "items": {
        "$ref": "link"
      },
      "type": "array"
    },
    "node": {
      "description": "The list of network nodes defined for the topology.",
      "items": {
        "$ref": "node"
      },
      "type": "array"
    },
    "topology-id": {
      "description": "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
      "required": false,
      "type": "string"
    },
    "topology-types": {
      "description": "This container is used to identify the type, or types \n                    (as a topology can support several types simultaneously), \n                    of the topology.  \n                    Topology types are the subject of several integrity constraints \n                    that an implementing server can validate in order to \n                    maintain integrity of the datastore.  \n                    Topology types are indicated through separate data nodes; \n                    the set of topology types is expected to increase over time.\n                    To add support for a new topology, an augmenting module\n                    needs to augment this container with a new empty optional \n                    container to indicate the new topology type.  \n                    The use of a container allows to indicate a subcategorization\n                    of topology types.  \n                    The container SHALL NOT be augmented with any data nodes \n                    that serve a purpose other than identifying a particular \n                    topology type.  \n                ",
      "properties": {},
      "type": "object"
    },
    "underlay-topology": {
      "description": "Identifies the topology, or topologies, that this topology\n                    is dependent on.",
      "items": {
        "$ref": "underlay-topology"
      },
      "type": "array"
    }
  },
  "type": "object"
}
