{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "properties": {
    "autoFocus": {
      "description": "Move focus to the popup.",
      "properties": {
        "enabled": {
          "default": true,
          "description": "If true the first suitable child element of the popover gets the focus on open.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "captureFocus": {
      "description": "Keep focus within the popup.",
      "properties": {
        "enabled": {
          "default": true,
          "description": "If true a focus change via tab key to any element outside of the popover is prohibited.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "close": {
      "description": "Close the popup upon action request.",
      "properties": {
        "onActions": {
          "default": [],
          "description": "Names of the actions that trigger closing of the popup.",
          "items": {
            "format": "topic",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "closeIcon": {
      "description": "Allow the user to close the popup using an icon or the escape key.",
      "properties": {
        "enabled": {
          "default": false,
          "description": "If true the popup is closed when escape key or the close icon is pressed.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "content": {
      "description": "Display content within the popup.",
      "properties": {
        "layout": {
          "description": "Path to the layout that is used within the popup.",
          "type": "string"
        }
      },
      "required": [
        "layout"
      ],
      "type": "object"
    },
    "forcedClose": {
      "description": "React to the user forcing the popup to close.",
      "properties": {
        "action": {
          "description": "Name of the action that is published whenever the popup is closed by user interaction.",
          "format": "topic",
          "type": "string"
        }
      },
      "type": "object"
    },
    "open": {
      "description": "Open a popup.",
      "properties": {
        "onActions": {
          "default": [],
          "description": "Names of the actions that trigger opening of the popup.",
          "items": {
            "format": "topic",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "position": {
      "description": "Configuration for the positioning of the popup.",
      "properties": {
        "vertical": {
          "default": "MIDDLE",
          "enum": [
            "MIDDLE",
            "TOP"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "preventBodyScrolling": {
      "description": "Prevent from scrolling the body element while the popup is visible.",
      "properties": {
        "enabled": {
          "default": true,
          "description": "If true sets overflow hidden on the body to prevent scrolling while visible.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "visibility": {
      "description": "Show or hide the popup depending on flag presence.",
      "properties": {
        "flag": {
          "default": "visible-popup",
          "description": "Name of the flag indicating the visibility of the popup.",
          "format": "topic",
          "type": "string"
        },
        "onTop": {
          "default": false,
          "description": "If true the popover gets a very high z-index to be on top of every other content.",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}
